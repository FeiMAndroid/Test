package com.github.alinz.reactnativewebviewbridge;

import android.util.Log;
import android.webkit.JavascriptInterface;
import android.widget.Toast;

import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.modules.core.DeviceEventManagerModule;

class JavascriptBridge {
  private ReactContext context;
  public JavascriptBridge(ReactContext context) {

    this.context = context;
//    Toast.makeText(context,"JS调用了你",Toast.LENGTH_SHORT).show();
  }
    @JavascriptInterface
    public void showAndroid(){
        Toast.makeText(context,"webview调用了你",Toast.LENGTH_SHORT).show();
    }
    @JavascriptInterface
    public void moreShare(){
        Log.d("i", "moreShare: ");
        WritableMap params = Arguments.createMap();
        params.putString("message","ShareMore");
        context.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                .emit("webViewBridgeMessage", params);
    }
    @JavascriptInterface
    public void weiboShare(){
        Log.d("i", "weiboShare: ");
        WritableMap params = Arguments.createMap();
        params.putString("message","ShareSinaWeibo");
        context.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                .emit("webViewBridgeMessage", params);
    }
    @JavascriptInterface
    public void weChatSession(){
        Log.d("i", "weChatSession: ");
        WritableMap params = Arguments.createMap();
        params.putString("message","ShareWechatTimeline");
        context.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                .emit("webViewBridgeMessage", params);
    }
    @JavascriptInterface
    public void weChatFriends(){
        Log.d("i", "weChatFriends: ");
        WritableMap params = Arguments.createMap();
        params.putString("message","ShareWechatSession");
        context.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                .emit("webViewBridgeMessage", params);
    }
    @JavascriptInterface
    public void commentLoadMore(){
        Log.d("i", "commentLoadMore: ");
        WritableMap params = Arguments.createMap();
        params.putString("message","commentLoadMore");
        context.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                .emit("webViewBridgeMessage", params);
    }
    @JavascriptInterface
    public boolean  hideNav(String s) {
//        Toast.makeText(context,s,Toast.LENGTH_SHORT).show();
        Log.d("i", "hideNav: "+s);
        WritableMap params = Arguments.createMap();
        params.putString("message","hideNav");
        params.putString("contain",s);
        context.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                .emit("webViewBridgeMessage", params);
        return true;

    }
    @JavascriptInterface
    public void hideNav(){
        Toast.makeText(context,"hideNav",Toast.LENGTH_SHORT).show();
        Log.d("i", "hideNav: ");
        WritableMap params = Arguments.createMap();
        params.putString("message","hideNav");
        context.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                .emit("webViewBridgeMessage", params);
    }
    @JavascriptInterface
    public void replay(String s) {
        Log.d("i", "replay: ");
        WritableMap params = Arguments.createMap();
        params.putString("message","replay");
        params.putString("contain",s);
        context.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                .emit("webViewBridgeMessage", params);
    }
    @JavascriptInterface
    public void copy(String s) {
        Log.d("i", "copy: ");
        WritableMap params = Arguments.createMap();
        params.putString("message","copy");
        params.putString("contain",s);
        context.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                .emit("webViewBridgeMessage", params);
    }
    @JavascriptInterface
    public void support(String s) {
        Log.d("i", "support: ");
        WritableMap params = Arguments.createMap();
        params.putString("message","support");
        params.putString("contain",s);
        context.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                .emit("webViewBridgeMessage", params);
    }
    @JavascriptInterface
    public void appreciate(String s) {
        Log.d("i", "appreciate: ");
        WritableMap params = Arguments.createMap();
        params.putString("message","appreciate");
        params.putString("contain",s);
        context.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                .emit("webViewBridgeMessage", params);
    }
    @JavascriptInterface
    public boolean hasAppreciated(String s) {
        Log.d("i", "hasAppreciated: ");
        WritableMap params = Arguments.createMap();
        params.putString("message","appreciate");
        params.putString("contain",s);
        context.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                .emit("webViewBridgeMessage", params);
        return true;

    }
  @JavascriptInterface
  public void send(String message) {
      Log.d("i", "send: ");
    WritableMap params = Arguments.createMap();
    params.putString("message", message);
    context.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
            .emit("webViewBridgeMessage", params);
  }
}
