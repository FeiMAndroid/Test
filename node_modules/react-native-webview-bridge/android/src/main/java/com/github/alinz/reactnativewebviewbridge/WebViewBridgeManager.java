package com.github.alinz.reactnativewebviewbridge;

import javax.annotation.Nullable;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.util.HashMap;
import java.util.Map;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Picture;
import android.net.Uri;
import android.os.Build;
import android.os.Environment;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.webkit.JavascriptInterface;
import android.webkit.ValueCallback;
import android.webkit.WebChromeClient;
import android.webkit.WebResourceError;
import android.webkit.WebResourceRequest;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.widget.Toast;

import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.views.webview.ReactWebViewManager;
import com.facebook.react.views.webview.WebViewConfig;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.common.MapBuilder;

public class WebViewBridgeManager extends ReactWebViewManager{
    private ReactContext context;
    private static final String REACT_CLASS = "RCTWebViewBridge";
    public static final int COMMAND_INJECT_BRIDGE_SCRIPT = 100;
    public static final int COMMAND_SEND_TO_BRIDGE = 101;
    Boolean hasAppreciated = false;
    private ProgressDialog progressDialog;
    int num = 0;
    //  private boolean initializedBridge;
    private Map<WebView, Boolean> initializedBridges = new HashMap<>();
    public WebViewBridgeManager() {
        super();
    }

    public WebViewBridgeManager(WebViewConfig webViewConfig) {
        super(webViewConfig);
    }

    @Override
    public String getName() {
        return REACT_CLASS;
    }

    @Override
    public @Nullable Map<String, Integer> getCommandsMap() {
        Map<String, Integer> commandsMap = super.getCommandsMap();
        if (commandsMap == null) commandsMap = new HashMap<>();   // Fix potential NPE
        commandsMap.put("injectBridgeScript", COMMAND_INJECT_BRIDGE_SCRIPT);
        commandsMap.put("sendToBridge", COMMAND_SEND_TO_BRIDGE);
        return commandsMap;
    }

    @Override
    public void receiveCommand(WebView root, int commandId, @Nullable ReadableArray args) {
        super.receiveCommand(root, commandId, args);
        root.getSettings().setJavaScriptEnabled(true);
        root.getSettings().setSupportZoom(true);
        context = (ReactContext) root.getContext();
        switch (commandId) {
            case COMMAND_INJECT_BRIDGE_SCRIPT:
                injectBridgeScript(root);
                break;
            case COMMAND_SEND_TO_BRIDGE:
                sendToBridge(root, args.getString(0));
                break;
            default:
                //do nothing!!!!
        }
    }

    private void sendToBridge(WebView root, String message) {
        root.addJavascriptInterface(new JavascriptBridges((ReactContext)root.getContext()), "hqTimehasAppreciated");
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            if(message.equals("s")){
                root.getSettings().setTextSize(WebSettings.TextSize.SMALLER);
            }else if(message.equals("n")){
                root.getSettings().setTextSize(WebSettings.TextSize.NORMAL);
            }else if(message.equals("l")){
                root.getSettings().setTextSize(WebSettings.TextSize.LARGER);
            }else if(message.equals("yes")){
                hasAppreciated = true;
            }else if(message.equals("no")){
                hasAppreciated = false;
            }else if(message.equals("downPic")){
                root.evaluateJavascript("window.hqTime.getImgUrl()", new ValueCallback<String>() {
                    @Override
                    public void onReceiveValue(String value) {
                        String DownloadUrl= value;
                        DownloadUrl.replace("\"","");
                        String mDownloadUrl=DownloadUrl.replace("\"","");
                        Log.d("onReceiveValue",mDownloadUrl);
                        Intent intent = new Intent();
                        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                        intent.setAction(android.content.Intent.ACTION_VIEW);
                        Uri content_url = Uri.parse(mDownloadUrl);
                        intent.setData(content_url);
                        context.startActivity(intent);
                    }
                });
            } else{
                root.evaluateJavascript(message,null);
            }
        }
    }
    public void mdownload(String mDownloadUrl) {

    }
    public Bitmap GetImageInputStream(String imageurl){
        URL url;
        HttpURLConnection connection=null;
        Bitmap bitmap=null;
        try {
            url = new URL(imageurl);
            connection=(HttpURLConnection)url.openConnection();
            connection.setConnectTimeout(6000); //超时设置
            connection.setDoInput(true);
            connection.setUseCaches(false); //设置不使用缓存
            InputStream inputStream=connection.getInputStream();
            bitmap=BitmapFactory.decodeStream(inputStream);
            inputStream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return bitmap;
    }
    public void SavaImage(Bitmap bitmap, String path){
        File file=new File(path);
        FileOutputStream fileOutputStream=null;
        //文件夹不存在，则创建它
        if(!file.exists()){
            file.mkdir();
        }
        try {
            fileOutputStream=new FileOutputStream(path+"/"+System.currentTimeMillis()+".jpg");
            bitmap.compress(Bitmap.CompressFormat.JPEG, 100,fileOutputStream);
            fileOutputStream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private  void injectBridgeScript(WebView root) {
        //this code needs to be called once per context
        if (initializedBridges.get(root) == null || !initializedBridges.get(root)) {
            initializedBridges.put(root, true);
            root.reload();
            root.addJavascriptInterface(new JavascriptBridge((ReactContext)root.getContext()), "hqTimeClient");
            initializedBridges.put(root, true);
        }
    }

    private class JavascriptBridges {
        private ReactContext context;
        public JavascriptBridges(ReactContext context) {
            this.context = context;
        }
        @JavascriptInterface
        public int hasAppreciated(){
            Log.d("i", "hasAppreciated: "+num);num++;
            if(hasAppreciated){return 1;}else{return 0;}
        }
    }
}
